2023-04-06 20:11:58:773 grammar LogManager.java:25 before: (COMBINED_GRAMMAR XML (RULES (RULE xml (BLOCK (ALT element))) (RULE element (BLOCK (ALT startTag content endTag) (ALT emptyTag))) (RULE content (BLOCK (ALT element) (ALT TEXT))) (RULE startTag (BLOCK (ALT OPEN_TAG (* (BLOCK (ALT attribute))) CLOSE_TAG))) (RULE endTag (BLOCK (ALT CLOSE_TAG NAME CLOSE_TAG))) (RULE emptyTag (BLOCK (ALT OPEN_TAG (* (BLOCK (ALT attribute))) (? (BLOCK (ALT WS))) '/>'))) (RULE attribute (BLOCK (ALT NAME (? (BLOCK (ALT WS))) '=' (? (BLOCK (ALT WS))) STRING))) (RULE OPEN_TAG (BLOCK (ALT '<'))) (RULE CLOSE_TAG (BLOCK (ALT '</'))) (RULE EMPTY_TAG (BLOCK (ALT '<!'))) (RULE TEXT (BLOCK (ALT (+ (BLOCK (ALT (~ (SET [<&])))))))) (RULE NAME (BLOCK (ALT [a-zA-Z_:] (* (BLOCK (ALT [a-zA-Z0-9_.:-])))))) (RULE STRING (BLOCK (ALT '"' (* (BLOCK (ALT (~ (SET ["<]))) (ALT ENTITY))) '"'))) (RULE ENTITY (BLOCK (ALT '&' (BLOCK (ALT 'lt') (ALT 'gt') (ALT 'amp') (ALT 'apos') (ALT 'quot')) ';'))) (RULE WS (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \t\r\n])))) skip)))))
2023-04-06 20:11:58:794 grammar LogManager.java:25 after: (COMBINED_GRAMMAR XML (RULES (RULE xml (BLOCK (ALT element))) (RULE element (BLOCK (ALT startTag content endTag) (ALT emptyTag))) (RULE content (BLOCK (ALT element) (ALT TEXT))) (RULE startTag (BLOCK (ALT OPEN_TAG (* (BLOCK (ALT attribute))) CLOSE_TAG))) (RULE endTag (BLOCK (ALT CLOSE_TAG NAME CLOSE_TAG))) (RULE emptyTag (BLOCK (ALT OPEN_TAG (* (BLOCK (ALT attribute))) (? (BLOCK (ALT WS))) '/>'))) (RULE attribute (BLOCK (ALT NAME (? (BLOCK (ALT WS))) '=' (? (BLOCK (ALT WS))) STRING))) (RULE OPEN_TAG (BLOCK (ALT '<'))) (RULE CLOSE_TAG (BLOCK (ALT '</'))) (RULE EMPTY_TAG (BLOCK (ALT '<!'))) (RULE TEXT (BLOCK (ALT (+ (BLOCK (ALT (~ (SET [<&])))))))) (RULE NAME (BLOCK (ALT [a-zA-Z_:] (* (BLOCK (ALT [a-zA-Z0-9_.:-])))))) (RULE STRING (BLOCK (ALT '"' (* (BLOCK (ALT (~ (SET ["<]))) (ALT ENTITY))) '"'))) (RULE ENTITY (BLOCK (ALT '&' (BLOCK (ALT 'lt') (ALT 'gt') (ALT 'amp') (ALT 'apos') (ALT 'quot')) ';'))) (RULE WS (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \t\r\n])))) skip)))))
2023-04-06 20:11:58:814 grammar LogManager.java:25 after extract implicit lexer =(COMBINED_GRAMMAR XML (RULES (RULE xml (BLOCK (ALT element))) (RULE element (BLOCK (ALT startTag content endTag) (ALT emptyTag))) (RULE content (BLOCK (ALT element) (ALT TEXT))) (RULE startTag (BLOCK (ALT OPEN_TAG (* (BLOCK (ALT attribute))) CLOSE_TAG))) (RULE endTag (BLOCK (ALT CLOSE_TAG NAME CLOSE_TAG))) (RULE emptyTag (BLOCK (ALT OPEN_TAG (* (BLOCK (ALT attribute))) (? (BLOCK (ALT WS))) '/>'))) (RULE attribute (BLOCK (ALT NAME (? (BLOCK (ALT WS))) '=' (? (BLOCK (ALT WS))) STRING)))))
2023-04-06 20:11:58:814 grammar LogManager.java:25 lexer =(LEXER_GRAMMAR XMLLexer (RULES (RULE T__0 (BLOCK (ALT '/>'))) (RULE T__1 (BLOCK (ALT '='))) (RULE OPEN_TAG (BLOCK (ALT '<'))) (RULE CLOSE_TAG (BLOCK (ALT '</'))) (RULE EMPTY_TAG (BLOCK (ALT '<!'))) (RULE TEXT (BLOCK (ALT (+ (BLOCK (ALT (~ (SET [<&])))))))) (RULE NAME (BLOCK (ALT [a-zA-Z_:] (* (BLOCK (ALT [a-zA-Z0-9_.:-])))))) (RULE STRING (BLOCK (ALT '"' (* (BLOCK (ALT (~ (SET ["<]))) (ALT ENTITY))) '"'))) (RULE ENTITY (BLOCK (ALT '&' (BLOCK (ALT 'lt') (ALT 'gt') (ALT 'amp') (ALT 'apos') (ALT 'quot')) ';'))) (RULE WS (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \t\r\n])))) skip)))))
2023-04-06 20:11:59:038 semantics LogManager.java:25 tokens={EOF=-1, T__0=1, T__1=2, OPEN_TAG=3, CLOSE_TAG=4, EMPTY_TAG=5, TEXT=6, NAME=7, STRING=8, ENTITY=9, WS=10}
2023-04-06 20:11:59:038 semantics LogManager.java:25 strings={'/>'=1, '='=2, '<'=3, '</'=4, '<!'=5}
2023-04-06 20:11:59:044 LL1 LogManager.java:25 
DECISION 0 in rule element
2023-04-06 20:11:59:045 LL1 LogManager.java:25 look=[3, 3]
2023-04-06 20:11:59:045 LL1 LogManager.java:25 LL(1)? false
2023-04-06 20:11:59:045 LL1 LogManager.java:25 
DECISION 1 in rule content
2023-04-06 20:11:59:045 LL1 LogManager.java:25 look=[3, 6]
2023-04-06 20:11:59:045 LL1 LogManager.java:25 LL(1)? true
2023-04-06 20:11:59:045 LL1 LogManager.java:25 
DECISION 2 in rule startTag
2023-04-06 20:11:59:045 LL1 LogManager.java:25 look=[7, 4]
2023-04-06 20:11:59:045 LL1 LogManager.java:25 LL(1)? true
2023-04-06 20:11:59:045 LL1 LogManager.java:25 
DECISION 3 in rule emptyTag
2023-04-06 20:11:59:045 LL1 LogManager.java:25 look=[7, {1, 10}]
2023-04-06 20:11:59:045 LL1 LogManager.java:25 LL(1)? true
2023-04-06 20:11:59:045 LL1 LogManager.java:25 
DECISION 4 in rule emptyTag
2023-04-06 20:11:59:045 LL1 LogManager.java:25 look=[10, 1]
2023-04-06 20:11:59:045 LL1 LogManager.java:25 LL(1)? true
2023-04-06 20:11:59:045 LL1 LogManager.java:25 
DECISION 5 in rule attribute
2023-04-06 20:11:59:045 LL1 LogManager.java:25 look=[10, 2]
2023-04-06 20:11:59:045 LL1 LogManager.java:25 LL(1)? true
2023-04-06 20:11:59:045 LL1 LogManager.java:25 
DECISION 6 in rule attribute
2023-04-06 20:11:59:045 LL1 LogManager.java:25 look=[10, 8]
2023-04-06 20:11:59:046 LL1 LogManager.java:25 LL(1)? true
