# Generated from E:/Compiler/Check_Button\XMLLexer.g4 by ANTLR 4.11.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,19,249,6,-1,6,-1,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,
        4,2,5,7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,
        12,7,12,2,13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,
        18,2,19,7,19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,1,
        0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,
        1,1,1,5,1,72,8,1,10,1,12,1,75,9,1,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,
        2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,5,2,92,8,2,10,2,12,2,95,9,2,1,2,1,
        2,1,2,1,2,1,3,1,3,1,3,1,3,5,3,105,8,3,10,3,12,3,108,9,3,1,3,1,3,
        1,3,1,3,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,4,5,122,8,5,11,5,12,5,123,
        1,5,1,5,1,5,1,5,1,5,1,5,1,5,4,5,133,8,5,11,5,12,5,134,1,5,1,5,3,
        5,139,8,5,1,6,1,6,3,6,143,8,6,1,6,4,6,146,8,6,11,6,12,6,147,1,7,
        1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,8,1,8,5,8,161,8,8,10,8,12,8,164,
        9,8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,10,4,10,177,8,10,11,
        10,12,10,178,1,11,1,11,1,11,1,11,1,12,1,12,1,12,1,12,1,12,1,13,1,
        13,1,13,1,13,1,13,1,14,1,14,1,15,1,15,1,16,1,16,5,16,201,8,16,10,
        16,12,16,204,9,16,1,16,1,16,1,16,5,16,209,8,16,10,16,12,16,212,9,
        16,1,16,3,16,215,8,16,1,17,1,17,5,17,219,8,17,10,17,12,17,222,9,
        17,1,18,1,18,1,18,1,18,1,19,1,19,1,20,1,20,1,21,1,21,1,21,1,21,3,
        21,236,8,21,1,22,3,22,239,8,22,1,23,1,23,1,23,1,23,1,23,1,24,1,24,
        1,24,1,24,3,73,93,106,0,25,3,1,5,2,7,3,9,4,11,5,13,6,15,7,17,8,19,
        9,21,0,23,10,25,11,27,12,29,13,31,14,33,15,35,16,37,17,39,18,41,
        0,43,0,45,0,47,0,49,19,51,0,3,0,1,2,10,2,0,9,9,32,32,2,0,38,38,60,
        60,2,0,34,34,60,60,2,0,39,39,60,60,3,0,9,10,13,13,32,32,3,0,48,57,
        65,70,97,102,1,0,48,57,2,0,45,46,95,95,3,0,183,183,768,879,8255,
        8256,8,0,58,58,65,90,97,122,8304,8591,11264,12271,12289,55295,63744,
        64975,65008,65533,260,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,
        0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,
        0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,1,25,1,0,0,0,1,27,1,0,0,0,1,29,1,
        0,0,0,1,31,1,0,0,0,1,33,1,0,0,0,1,35,1,0,0,0,1,37,1,0,0,0,1,39,1,
        0,0,0,2,49,1,0,0,0,2,51,1,0,0,0,3,53,1,0,0,0,5,65,1,0,0,0,7,80,1,
        0,0,0,9,100,1,0,0,0,11,113,1,0,0,0,13,138,1,0,0,0,15,145,1,0,0,0,
        17,149,1,0,0,0,19,153,1,0,0,0,21,167,1,0,0,0,23,176,1,0,0,0,25,180,
        1,0,0,0,27,184,1,0,0,0,29,189,1,0,0,0,31,194,1,0,0,0,33,196,1,0,
        0,0,35,214,1,0,0,0,37,216,1,0,0,0,39,223,1,0,0,0,41,227,1,0,0,0,
        43,229,1,0,0,0,45,235,1,0,0,0,47,238,1,0,0,0,49,240,1,0,0,0,51,245,
        1,0,0,0,53,54,5,99,0,0,54,55,5,104,0,0,55,56,5,101,0,0,56,57,5,99,
        0,0,57,58,5,107,0,0,58,59,5,98,0,0,59,60,5,117,0,0,60,61,5,116,0,
        0,61,62,5,116,0,0,62,63,5,111,0,0,63,64,5,110,0,0,64,4,1,0,0,0,65,
        66,5,60,0,0,66,67,5,33,0,0,67,68,5,45,0,0,68,69,5,45,0,0,69,73,1,
        0,0,0,70,72,9,0,0,0,71,70,1,0,0,0,72,75,1,0,0,0,73,74,1,0,0,0,73,
        71,1,0,0,0,74,76,1,0,0,0,75,73,1,0,0,0,76,77,5,45,0,0,77,78,5,45,
        0,0,78,79,5,62,0,0,79,6,1,0,0,0,80,81,5,60,0,0,81,82,5,33,0,0,82,
        83,5,91,0,0,83,84,5,67,0,0,84,85,5,68,0,0,85,86,5,65,0,0,86,87,5,
        84,0,0,87,88,5,65,0,0,88,89,5,91,0,0,89,93,1,0,0,0,90,92,9,0,0,0,
        91,90,1,0,0,0,92,95,1,0,0,0,93,94,1,0,0,0,93,91,1,0,0,0,94,96,1,
        0,0,0,95,93,1,0,0,0,96,97,5,93,0,0,97,98,5,93,0,0,98,99,5,62,0,0,
        99,8,1,0,0,0,100,101,5,60,0,0,101,102,5,33,0,0,102,106,1,0,0,0,103,
        105,9,0,0,0,104,103,1,0,0,0,105,108,1,0,0,0,106,107,1,0,0,0,106,
        104,1,0,0,0,107,109,1,0,0,0,108,106,1,0,0,0,109,110,5,62,0,0,110,
        111,1,0,0,0,111,112,6,3,0,0,112,10,1,0,0,0,113,114,5,38,0,0,114,
        115,3,37,17,0,115,116,5,59,0,0,116,12,1,0,0,0,117,118,5,38,0,0,118,
        119,5,35,0,0,119,121,1,0,0,0,120,122,3,43,20,0,121,120,1,0,0,0,122,
        123,1,0,0,0,123,121,1,0,0,0,123,124,1,0,0,0,124,125,1,0,0,0,125,
        126,5,59,0,0,126,139,1,0,0,0,127,128,5,38,0,0,128,129,5,35,0,0,129,
        130,5,120,0,0,130,132,1,0,0,0,131,133,3,41,19,0,132,131,1,0,0,0,
        133,134,1,0,0,0,134,132,1,0,0,0,134,135,1,0,0,0,135,136,1,0,0,0,
        136,137,5,59,0,0,137,139,1,0,0,0,138,117,1,0,0,0,138,127,1,0,0,0,
        139,14,1,0,0,0,140,146,7,0,0,0,141,143,5,13,0,0,142,141,1,0,0,0,
        142,143,1,0,0,0,143,144,1,0,0,0,144,146,5,10,0,0,145,140,1,0,0,0,
        145,142,1,0,0,0,146,147,1,0,0,0,147,145,1,0,0,0,147,148,1,0,0,0,
        148,16,1,0,0,0,149,150,5,60,0,0,150,151,1,0,0,0,151,152,6,7,1,0,
        152,18,1,0,0,0,153,154,5,60,0,0,154,155,5,63,0,0,155,156,5,120,0,
        0,156,157,5,109,0,0,157,158,5,108,0,0,158,162,1,0,0,0,159,161,3,
        39,18,0,160,159,1,0,0,0,161,164,1,0,0,0,162,160,1,0,0,0,162,163,
        1,0,0,0,163,165,1,0,0,0,164,162,1,0,0,0,165,166,6,8,1,0,166,20,1,
        0,0,0,167,168,5,60,0,0,168,169,5,63,0,0,169,170,1,0,0,0,170,171,
        3,37,17,0,171,172,1,0,0,0,172,173,6,9,2,0,173,174,6,9,3,0,174,22,
        1,0,0,0,175,177,8,1,0,0,176,175,1,0,0,0,177,178,1,0,0,0,178,176,
        1,0,0,0,178,179,1,0,0,0,179,24,1,0,0,0,180,181,5,62,0,0,181,182,
        1,0,0,0,182,183,6,11,4,0,183,26,1,0,0,0,184,185,5,63,0,0,185,186,
        5,62,0,0,186,187,1,0,0,0,187,188,6,12,4,0,188,28,1,0,0,0,189,190,
        5,47,0,0,190,191,5,62,0,0,191,192,1,0,0,0,192,193,6,13,4,0,193,30,
        1,0,0,0,194,195,5,47,0,0,195,32,1,0,0,0,196,197,5,61,0,0,197,34,
        1,0,0,0,198,202,5,34,0,0,199,201,8,2,0,0,200,199,1,0,0,0,201,204,
        1,0,0,0,202,200,1,0,0,0,202,203,1,0,0,0,203,205,1,0,0,0,204,202,
        1,0,0,0,205,215,5,34,0,0,206,210,5,39,0,0,207,209,8,3,0,0,208,207,
        1,0,0,0,209,212,1,0,0,0,210,208,1,0,0,0,210,211,1,0,0,0,211,213,
        1,0,0,0,212,210,1,0,0,0,213,215,5,39,0,0,214,198,1,0,0,0,214,206,
        1,0,0,0,215,36,1,0,0,0,216,220,3,47,22,0,217,219,3,45,21,0,218,217,
        1,0,0,0,219,222,1,0,0,0,220,218,1,0,0,0,220,221,1,0,0,0,221,38,1,
        0,0,0,222,220,1,0,0,0,223,224,7,4,0,0,224,225,1,0,0,0,225,226,6,
        18,0,0,226,40,1,0,0,0,227,228,7,5,0,0,228,42,1,0,0,0,229,230,7,6,
        0,0,230,44,1,0,0,0,231,236,3,47,22,0,232,236,7,7,0,0,233,236,3,43,
        20,0,234,236,7,8,0,0,235,231,1,0,0,0,235,232,1,0,0,0,235,233,1,0,
        0,0,235,234,1,0,0,0,236,46,1,0,0,0,237,239,7,9,0,0,238,237,1,0,0,
        0,239,48,1,0,0,0,240,241,5,63,0,0,241,242,5,62,0,0,242,243,1,0,0,
        0,243,244,6,23,4,0,244,50,1,0,0,0,245,246,9,0,0,0,246,247,1,0,0,
        0,247,248,6,24,2,0,248,52,1,0,0,0,20,0,1,2,73,93,106,123,134,138,
        142,145,147,162,178,202,210,214,220,235,238,5,6,0,0,5,1,0,3,0,0,
        5,2,0,4,0,0
    ]

class XMLLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    INSIDE = 1
    PROC_INSTR = 2

    CheckButtonTag = 1
    COMMENT = 2
    CDATA = 3
    DTD = 4
    EntityRef = 5
    CharRef = 6
    SEA_WS = 7
    OPEN = 8
    XMLDeclOpen = 9
    TEXT = 10
    CLOSE = 11
    SPECIAL_CLOSE = 12
    SLASH_CLOSE = 13
    SLASH = 14
    EQUALS = 15
    STRING = 16
    Name = 17
    S = 18
    PI = 19

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE", "INSIDE", "PROC_INSTR" ]

    literalNames = [ "<INVALID>",
            "'checkbutton'", "'<'", "'>'", "'/>'", "'/'", "'='" ]

    symbolicNames = [ "<INVALID>",
            "CheckButtonTag", "COMMENT", "CDATA", "DTD", "EntityRef", "CharRef", 
            "SEA_WS", "OPEN", "XMLDeclOpen", "TEXT", "CLOSE", "SPECIAL_CLOSE", 
            "SLASH_CLOSE", "SLASH", "EQUALS", "STRING", "Name", "S", "PI" ]

    ruleNames = [ "CheckButtonTag", "COMMENT", "CDATA", "DTD", "EntityRef", 
                  "CharRef", "SEA_WS", "OPEN", "XMLDeclOpen", "SPECIAL_OPEN", 
                  "TEXT", "CLOSE", "SPECIAL_CLOSE", "SLASH_CLOSE", "SLASH", 
                  "EQUALS", "STRING", "Name", "S", "HEXDIGIT", "DIGIT", 
                  "NameChar", "NameStartChar", "PI", "IGNORE" ]

    grammarFileName = "XMLLexer.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.11.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


